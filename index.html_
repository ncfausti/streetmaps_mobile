<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Google Maps StreetView API with HTML5 Device Orientation</title>
    <link href="maps.css" rel="stylesheet">
    <style>
    #html5LogoDiv { display: none; }
    /* Remove debug info 
    #html5LogoDiv, #devOrientDiv, #panoInfo { display:none; }


     Set map view to full screen */
    #pano {
      width: 100%;
      height: 100%;

      /* width: 925px; height: 540px;float:left; */
    }
    #searchArea {
       position: absolute; 
       left: 64px;
       bottom: 5px;
       opacity: .3;
     }

     #debugInfo {
        position: absolute;
        right: 0px;
        bottom: 20px;
        opacity: .6;
        color: yellow;
        font-size: .5em;
        width: 220px;
        font-family: arial;
     }

    </style>
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"></script>
    <script>
      var geocoder = new google.maps.Geocoder();
      var newLatLng = null;
      
      function search() {
        var address = document.getElementById('address').value;
        console.log(address);
        geocoder.geocode( { 'address': address}, function(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            // Just get LatLng and get out
            //console.log(results[0].geometry.location);
            newLatLng = results[0].geometry.location;
            initialize(newLatLng);
          } else {
            alert('Geocode was not successful for the following reason: ' + status);
          }
        });
      }

      var philly = new google.maps.LatLng(39.948648,-75.174245);
      var alps = new google.maps.LatLng(46.414382,10.013988);
      var nasa = new google.maps.LatLng(28.586249,-80.651195);

      var panorama = null;

      function initialize(startLocation) {

        var panoramaOptions = {
          position: startLocation,
          pov: {
            heading: 0,
            pitch: 0
          },
          visible: true
        };
        // console.log("POV: " + panoramaOptions.pov.heading, panoramaOptions.pov.pitch );
        panorama = new google.maps.StreetViewPanorama(document.getElementById('pano'), panoramaOptions);

        google.maps.event.addListener(panorama, 'pano_changed', function() {
            var panoCell = document.getElementById('pano_cell');
            panoCell.innerHTML = panorama.getPano();
        });

        google.maps.event.addListener(panorama, 'links_changed', function() {
            var linksTable = document.getElementById('links_table');
            while(linksTable.hasChildNodes()) {
              linksTable.removeChild(linksTable.lastChild);
            };
            var links =  panorama.getLinks();
            for (var i in links) {
              var row = document.createElement('tr');
              linksTable.appendChild(row);
              var labelCell = document.createElement('td');
              labelCell.innerHTML = '<b>Link: ' + i + '</b>';
              var valueCell = document.createElement('td');
              valueCell.innerHTML = links[i].description;
              linksTable.appendChild(labelCell);
              linksTable.appendChild(valueCell);
            }
        });

        google.maps.event.addListener(panorama, 'position_changed', function() {
            var positionCell = document.getElementById('position_cell');
            positionCell.firstChild.nodeValue = panorama.getPosition();
        });

        google.maps.event.addListener(panorama, 'pov_changed', function() {
            var headingCell = document.getElementById('heading_cell');
            var pitchCell = document.getElementById('pitch_cell');
            headingCell.firstChild.nodeValue = panorama.getPov().heading;
            pitchCell.firstChild.nodeValue = panorama.getPov().pitch;
        });
    }



    </script>

  </head>
  <body onload="initialize(nasa)">
    <input type="hidden" id="q" value="" />
    <div id="pano"></div>
    <div id="searchArea"><input type="text" id="address" />&nbsp;&nbsp;<input type="submit" value="Go" onclick="search()" /></div>
    
<div id="debugInfo">

    <div id="panoInfo" style="width: 425px; height: 240 px;float:left;">
    <table>
      <tr>
        <td><b>Position</b></td><td id="position_cell">&nbsp;</td>
      </tr>
      <tr>
        <td><b>POV Heading</b></td><td id="heading_cell">0</td>
      </tr>
      <tr>
        <td><b>POV Pitch</b></td><td id="pitch_cell">0.0</td>
      </tr>
      <tr>
        <td><b>Pano ID</b></td><td id="pano_cell">&nbsp;</td>
      </tr>
      <table id="links_table"></table>
    </table>
    </div>
    
    <div class="main" id="devOrientDiv">
  <table>
    <tr>
      <td>Event Supported</td>
      <td id="doEvent"></td>
    </tr>
    <tr>
      <td>Tilt Left/Right [tiltLR]</td>
      <td id="doTiltLR"></td>
    </tr>
    <tr>
      <td>Tilt Front/Back [tiltFB]</td>
      <td id="doTiltFB"></td>
    </tr>
    <tr>
      <td>Direction [direction]</td>
      <td id="doDirection"></td>
    </tr>
    <tr>
      <td>Motion Up/Down</td>
      <td id="doMotionUD"></td>
    </tr>
   </table>
</div>

 <div class="container" id="html5LogoDiv"style="-webkit-perspective: 300; perspective: 300;">
  <img src="html5_logo.png" id="imgLogo" class="logo">
 </div>
</div>
</body>

<script>

// HTML5 gyro/accelerometer

if (window.DeviceMotionEvent) {
  console.log("DeviceMotionEvent supported");
} 

if (window.DeviceOrientationEvent) {
 console.log("DeviceOrientation is supported");
} else if (window.OrientationEvent) {
 console.log("MozOrientation is supported");
}

devOrientHandler = function() {
  console.log("Chrome orient handler");
}

mozDevOrientHandler = function() {
  console.log("Mozilla orient handler");
}

if (window.DeviceOrientationEvent) {
  // Listen for the deviceorientation event and handle DeviceOrientationEvent object
  window.addEventListener('deviceorientation', devOrientHandler, false);
} else if (window.OrientationEvent) {
  // Listen for the MozOrientation event and handle OrientationData object
  window.addEventListener('MozOrientation', mozDevOrientHandler, false);
}


if (window.DeviceOrientationEvent) {
 console.log("DeviceOrientation is supported");
} else if (window.OrientationEvent) {
 console.log("MozOrientation is supported");
}

if (window.DeviceOrientationEvent) {
  document.getElementById("doEvent").innerHTML = "DeviceOrientation";
  // Listen for the deviceorientation event and handle the raw data
  window.addEventListener('deviceorientation', function(eventData) {
    // gamma is the left-to-right tilt in degrees, where right is positive
    var tiltLR = eventData.gamma;

    // beta is the front-to-back tilt in degrees, where front is positive
    var tiltFB = eventData.beta;

    // alpha is the compass direction the device is facing in degrees
    var dir = eventData.alpha

    // deviceorientation does not provide this data
    var motUD = null;

    // call our orientation event handler
    deviceOrientationHandler(tiltLR, tiltFB, dir, motUD);
  }, false);
} else if (window.OrientationEvent) {
  document.getElementById("doEvent").innerHTML = "MozOrientation";
  window.addEventListener('MozOrientation', function(eventData) {
    // x is the left-to-right tilt from -1 to +1, so we need to convert to degrees
    var tiltLR = eventData.x * 90;

    // y is the front-to-back tilt from -1 to +1, so we need to convert to degrees
    // We also need to invert the value so tilting the device towards us (forward) 
    // results in a positive value. 
    var tiltFB = eventData.y * -90;

    // MozOrientation does not provide this data
    var dir = null;

    // z is the vertical acceleration of the device
    var motUD = eventData.z;
    
    // call our orientation event handler
    deviceOrientationHandler(tiltLR, tiltFB, dir, motUD);
  }, false);
} else {
  document.getElementById("doEvent").innerHTML = "Not supported on your device or browser."
}

deviceOrientationHandler = function(tiltLR, tiltFB, dir, motionUD) {
  
  // Use tiltLR (up/down when in horizontal mode) to set POV Pitch -45 <---> 45
  // Use direction to set POV Heading, increase when moving right, decrease when moving left

  // Need a way to determine orientation of device
  // window.oriention == 0, for upright
  //                  == 90 for bottom on right, landscape
  //                  == 180 for bottom on top, potrait
  //                  == -90 for bottom on left, landscape
 
  var relativeDir  = null;
  var relativeTilt = null;

  if (window.orientation == 0) {
    console.log("dir:" + dir);
    console.log("tiltLR:"+tiltLR);
    console.log("tiltFB:" + tiltFB);
    relativeDir  = dir * - 1 ;          // look left/right
    relativeTilt = (tiltFB - 45) ;              // look up/down 
  }

  else if(window.orientation == -90) {
    relativeDir  = dir * -1;            // look left/right
    relativeTilt = tiltLR - 90;    // look up/down
  }

  else if(window.orientation == 90) {
    relativeDir  = (dir * -1) + 180;    // look left/right
    relativeTilt = (tiltLR + 90) * -1;  // look up/down
  }

  // 180
  else {
    ;
  }

  panorama.setPov({ heading: relativeDir , pitch: relativeTilt });

  document.getElementById("doTiltLR").innerHTML = Math.round(tiltLR);
  document.getElementById("doTiltFB").innerHTML = Math.round(tiltFB);
  document.getElementById("doDirection").innerHTML = Math.round(dir);
  document.getElementById("doMotionUD").innerHTML = motionUD;

  // Apply the transform to the image
 // document.getElementById("imgLogo").style.webkitTransform = "rotate(" + 
 //   tiltLR + "deg) rotate3d(1,0,0, " + (tiltFB * -1) + "deg)";
 // document.getElementById("imgLogo").style.MozTransform = "rotate(" + tiltLR + "deg)";
 // document.getElementById("imgLogo").style.transform = "rotate(" + tiltLR + 
 //   "deg) rotate3d(1,0,0, " + (tiltFB * -1) + "deg)";



  /* Old way
  panorama.setPov({ heading: dir * -1 , pitch: (tiltLR + 90 * -1) });

  document.getElementById("doTiltLR").innerHTML = Math.round(tiltLR);
  document.getElementById("doTiltFB").innerHTML = Math.round(tiltFB);
  document.getElementById("doDirection").innerHTML = Math.round(dir);
  document.getElementById("doMotionUD").innerHTML = motionUD;

  // Apply the transform to the image
  document.getElementById("imgLogo").style.webkitTransform = "rotate(" + 
    tiltLR + "deg) rotate3d(1,0,0, " + (tiltFB * -1) + "deg)";
  document.getElementById("imgLogo").style.MozTransform = "rotate(" + tiltLR + "deg)";
  document.getElementById("imgLogo").style.transform = "rotate(" + tiltLR + 
    "deg) rotate3d(1,0,0, " + (tiltFB * -1) + "deg)";
*/
}

</script>

</html>

